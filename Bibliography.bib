@article{Claps2015,
abstract = {Context: Continuous Deployment (CD) is an emerging software development process with organisations such as Facebook, Microsoft, and IBM successfully implementing and using the process. The CD process aims to immediately deploy software to customers as soon as new code is developed, and can result in a number of benefits for organisations, such as: new business opportunities, reduced risk for each release, and prevent development of wasted software. There is little academic literature on the challenges organisations face when adopting the CD process, however there are many anecdotal challenges that organisations have voiced on their online blogs. Objective: The aim of this research is to examine the challenges faced by organisations when adopting CD as well as the strategies to mitigate these challenges. Method: An explorative case study technique that involves in-depth interviews with software practitioners in an organisation that has adopted CD was conducted to identify these challenges. Results: This study found a total of 20 technical and social adoption challenges that organisations may face when adopting the CD process. The results are discussed to gain a deeper understanding of the strategies employed by organisations to mitigate the impacts of these challenges. Conclusion: While a number of individual technical and social adoption challenges were uncovered by the case study in this research, most challenges were not faced in isolation. The severity of these challenges were reduced by a number of mitigation strategies employed by the case study organisation. It is concluded that organisations need to be well prepared to handle technical and social adoption challenges with their existing expertise, processes and tools before adopting the CD process. For practitioners, knowing how to address the challenges an organisation may face when adopting the CD process provides a level of awareness that they previously may not have had.},
author = {Claps, Gerry Gerard and {Berntsson Svensson}, Richard and Aurum, Ayb{\"{u}}ke},
doi = {10.1016/j.infsof.2014.07.009},
isbn = {09505849},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Agile software development,Challenges and mitigation strategies,Continuous deployment,Lean software development},
number = {1},
pages = {21--31},
publisher = {Elsevier},
title = {{On the journey to continuous deployment: Technical and social challenges along the way}},
volume = {57},
year = {2015}
}
@inproceedings{Deshpande2008,
abstract = {Commercial software firms are increasingly using and contributing to open source software. Thus, they need to understand and work with open source software development processes. This paper investigates whether the practice of continuous integration of agile software development methods has had an impact on open source software projects. Using fine-granular data from more than 5000 active open source software projects we analyze the size of code contributions over a project's life-span. Code contribution size has stayed flat. We interpret this to mean that open source software development has not changed its code integration practices. In particular, within the limits of this study, we claim that the practice of continuous integration has not yet significantly influenced the behavior of open source software developers.},
address = {Boston},
author = {Deshpande, Amit and Riehle, Dirk},
booktitle = {Proceedings of the Fourth Conference on Open Source Systems - OSS},
doi = {10.1007/978-0-387-09684-1_23},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Deshpande, Riehle - 2008 - Continuous integration in open source software development.pdf:pdf},
isbn = {978-0-387-09683-4},
issn = {1571-5736},
pages = {273--280},
publisher = {Springer},
title = {{Continuous Integration in Open Source Software Development}},
volume = {275},
year = {2008}
}
@inproceedings{Fitzgerald2014,
abstract = {Throughout its short history, software development has been characterized by harmful disconnects between important activities e.g., planning, development and implementation. The problem is further exacerbated by the episodic and infrequent performance of activities such as planning, testing, integration and releases. Several emerging phenomena reflect attempts to address these problems. For example, the Enterprise Agile concept has emerged as a recognition that the benefits of agile software development will be sub- optimal if not complemented by an agile approach in related organizational function such as finance and HR. Continuous integration is a practice which has emerged to eliminate discontinuities between development and deployment. In a similar vein, the recent emphasis on DevOps recognizes that the integration between software development and its operational deployment needs to be a continuous one. We argue a similar continuity is required between business strategy and development, BizDev being the term we coin for this. These disconnects are even more problematic given the need for reliability and resilience in the complex and data-intensive systems being developed today. Drawing on the lean concept of flow, we identify a number of continuous activities which are important for software development in today's context. These activities include continuous planning, continuous integration, continuous deployment, continuous delivery, continuous verification, continuous testing, continuous compliance,continuous security, continuous use, continuous trust, continuous run-time monitoring, continuous improvement (both process and product), all underpinned by continuous innovation. We use the umbrella term, ``Continuous *'' (continuous star) to identify this family of continuous activities.},
address = {New York},
author = {Fitzgerald, Brian and Stol, Klaas-Jan},
booktitle = {Proceedings of the 1st International Workshop on Rapid Continuous Software Engineering - RCoSE 2014},
doi = {10.1145/2593812.2593813},
isbn = {9781450328562},
keywords = {BizDev,Continuous Star,DevOps,continuous software engineering},
pages = {1--9},
publisher = {ACM},
title = {{Continuous software engineering and beyond: trends and challenges}},
year = {2014}
}
@article{Holck2003,
abstract = {A decentralized variant of continuous integration can be defined in terms of two fundamental rules: (1) Developers' access to add contributions to the development version at any time, and (2) developers' obligation to integrate their own contributions properly. Decentralized, continuous integration may adapt well to organizations where developers work relatively independently, as in many open source projects. The approach raises the issue of how these organizations can exercise central control, as attaining the benefits of continuous integration requires that contributions are useful and satisfy the project's definition of successful integration. We have investigated the use of continuous integration in FreeBSD and Mozilla. Our account of quality assurance activities in the two open source projects distinguishes between Mintzberg's three complementary forms of central control: Standardization and control of work output, work processes, and worker skills. Our study indicates that two major challenges face projects using decentralized, continuous integration: (1) To balance the access to add contributions against the need to stabilize and mature the software prior to a release, and (2) to consider the developers' limited time and resources when interpreting their obligation to integrate their changes properly.},
author = {Holck, J and J{\o}rgensen, N},
doi = {10.3127/ajis.v11i1.145},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Holck, J{\o}rgensen - 2003 - Continuous integration and quality assurance A case study of two open source projects.pdf:pdf},
isbn = {1326-2238},
issn = {1449-8618},
journal = {Australasian Journal of Information Systems},
keywords = {BizDev,Continuous Star,DevOps,continuous software engineering},
number = {2003},
pages = {40--53},
title = {{Continuous integration and quality assurance: A case study of two open source projects}},
year = {2007}
}
@inproceedings{Miller2008,
abstract = {Many agile teams use continuous integration (CI). It is one of the extreme programming practices and has been broadly adopted by the community [1]. Just how effective is it? Does the effort of maintaining the CI server and fixing build breaks save time compared to a lengthier check-in process that attempts to never break the build? While much anecdotal evidence exists as to the benefits of CI there is very little in the way of data to support this. How do you convince teams and management that itpsilas worth adopting and how best to do it? This report outlines our experience with CI in a distributed team environment and attempts to answer these questions.},
author = {Miller, Ade},
booktitle = {Proceedings - Agile 2008 Conference},
doi = {10.1109/Agile.2008.8i},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Miller - 2008 - A hundred days of continuous integration.pdf:pdf},
isbn = {9780769533216},
pages = {289--293},
publisher = {IEEE},
title = {{A hundred days of continuous integration}},
year = {2008}
}
@article{Mockus2002,
abstract = {According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine data from two major open source projects, the Apache web server and the Mozilla browser. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution intervals for these OSS projects. We develop several hypotheses by comparing the Apache project with several commercial projects. We then test and refine several of these hypotheses, based on an analysis of Mozilla data. We conclude with thoughts about the prospects for high-performance commercial/open source process hybrids.},
author = {Mockus, Audris and Fielding, Roy T and Herbsleb, James D},
doi = {10.1145/567793.567795},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mockus, Fielding, Herbsleb - 2002 - Two case studies of open source software development Apache and Mozilla.pdf:pdf},
isbn = {1049-331X},
issn = {1049-331X},
journal = {ACM Trans. Softw. Eng. Methodol.},
number = {3},
pages = {309--346},
title = {{Two case studies of open source software development: Apache and Mozilla}},
volume = {11},
year = {2002}
}
@article{Stahl2014,
author = {St{\aa}hl, Daniel and Bosch, Jan},
doi = {10.1016/j.jss.2013.08.032},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/St{\aa}hl, Bosch - 2014 - Modeling continuous integration practice differences in industry software development.pdf:pdf},
isbn = {0164-1212},
journal = {The Journal of Systems and Software},
keywords = {Agile software development,Continuous integration},
mendeley-tags = {Agile software development,Continuous integration},
pages = {48--59},
title = {{Modeling continuous integration practice differences in industry software development}},
volume = {87},
year = {2014}
}
@article{Stahl2013,
abstract = {In this paper, we present a multi-case study of industrial experiences of continuous integration among software professionals working in large scale development projects. In literature, multiple benefits of continuous integration are suggested, but case studies validating these benefits are lacking. This study investigates the extent to which continuous integration effects - increased developer productivity, increased project predictability, improved communication and enabling agile testing - suggested in literature are experienced in industry development projects. The study involves four independent products at different levels of continuous integration maturity within Ericsson AB. In each of these products developers, testers, project managers and line managers have been interviewed. Their experiences of continuous integration are quantitatively assessed and discussed in comparison to the continuous integration benefits proposed in related work.},
author = {St{\aa}hl, Daniel and Bosch, Jan},
doi = {10.2316/P.2013.796-012},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/St{\aa}hl, Bosch - 2013 - Experienced benefits of continuous integration in industry software product development A case study.pdf:pdf},
isbn = {978-0-88986-943-1},
journal = {Artificial Intelligence and Applications - AIA},
keywords = {Agile Software Development,Agile software development,Continuous Integration,Continuous integration,Software Methodologies,Software methodologies},
mendeley-tags = {Agile Software Development,Continuous Integration,Software Methodologies},
number = {April 2016},
pages = {736--743},
title = {{Experienced Benefits of Continuous Integration in Industry Software Product Development: A Case Study}},
year = {2013}
}
@inproceedings{Stolberg2009,
abstract = {A continuous integration system is often considered one of the key elements involved in supporting an agile software development and testing environment. As a traditional software tester transitioning to an agile development environment it became clear to me that I would need to put this essential infrastructure in place and promote improved development practices in order to make the transition to agile testing possible. This experience report discusses a continuous integration implementation I led last year. The initial motivations for implementing continuous integration are discussed and a pre and post-assessment using Martin Fowler's" practices of continuous integration" is provided along with the technical specifics of the implementation. The report concludes with a retrospective of my experiences implementing and promoting continuous integration within the context of agile testing.},
author = {Stolberg, Sean},
booktitle = {Proceedings - 2009 Agile Conference, AGILE 2009},
doi = {10.1109/AGILE.2009.16},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Stolberg - 2009 - Enabling agile testing through continuous integration.pdf:pdf},
isbn = {9780769537689},
pages = {369--374},
publisher = {IEEE},
title = {{Enabling agile testing through continuous integration}},
year = {2009}
}
@inproceedings{Vasilescu2015,
abstract = {Software processes comprise many steps; coding is followed by building, integration testing, system testing, deployment, operations, among others. Software process integration and automation have been areas of key concern in software engi- neering, ever since the pioneering work of Osterweil; market pressures for Agility, and open, decentralized, software de- velopment have provided additional pressures for progress in this area. But do these innovations actually help projects? Given the numerous confounding factors that can influence project performance, it can be a challenge to discern the ef- fects of process integration and automation. Software project ecosystems such as GitHub provide a new opportunity in this regard: one can readily find large numbers of projects in various stages of process integration and automation, and gather data on various influencing factors as well as produc- tivity and quality outcomes. In this paper we use large, historical data on process metrics and outcomes in GitHub projects to discern the effects of one specific innovation in process automation: continuous integration. Our main find- ing is that continuous integration improves the productivity of project teams, who can integrate more outside contribu- tions, without an observable diminishment in code quality.},
address = {New York},
author = {Vasilescu, Bogdan and Yu, Yue and Wang, Huaimin and Devanbu, Premkumar and Filkov, Vladimir},
booktitle = {ESEC/FSE conf. - Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
doi = {10.1145/2786805.2786850},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Vasilescu et al. - 2015 - Quality and productivity outcomes relating to continuous integration in GitHub.pdf:pdf},
isbn = {9781450336758},
keywords = {Continuous integration,GitHub,pull requests},
pages = {805--816},
publisher = {ACM},
title = {{Quality and productivity outcomes relating to continuous integration in GitHub}},
year = {2015}
}
@book{Humble2010,
address = {London},
author = {Humble, J and Farley, D},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Humble, Farley - 2010 - Continuous delivery reliable software releases through build, test, and deployment automation.pdf:pdf},
isbn = {978-0-321-60191-9},
mendeley-groups = {continuous{\_}integration},
publisher = {Pearson Education},
title = {{Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation}},
year = {2010}
}
@book{Beck2004,
address = {Boston},
author = {Beck, Kent and Cynthia, Andres},
file = {:C$\backslash$:/Users/Thomas/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Beck - 2000 - Extreme programming explained embrace change.pdf:pdf},
isbn = {0-321-27865-8},
mendeley-groups = {continuous{\_}integration},
number = {c},
pages = {224},
publisher = {Addison Wesley Professional},
title = {{Extreme Programming Explained: Embrace Change}},
year = {2004}
}
